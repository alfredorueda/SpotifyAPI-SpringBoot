@startuml
title Domain Model: Playlist and Track

class Playlist {
    - id: String
    - name: String
    - isPublic: Boolean
    - createdAt: LocalDateTime
    - tracks: List<Track>
    --
    + Playlist(name: String, isPublic: Boolean)
    + addTrack(track: Track): void
    + addTrackAtPosition(track: Track, position: int): void
    + removeTrack(track: Track): boolean
    + getTotalDuration(): int
    + getTrackCount(): int
    + getName(): String
    + getIsPublic(): Boolean
    + getTracks(): List<Track>
    + setName(name: String): void
    + setIsPublic(isPublic: Boolean): void
    # onCreate(): void
}

class Track {
    - id: String
    - title: String
    - artist: String
    - duration: Integer
    - createdAt: LocalDateTime
    --
    + Track(title: String, artist: String, duration: Integer)
    + getTitle(): String
    + getArtist(): String
    + getDuration(): Integer
    + setTitle(title: String): void
    + setArtist(artist: String): void
    + setDuration(duration: Integer): void
    # onCreate(): void
}

Playlist o--o{ Track : contains

note right of Playlist
  **Rich Domain Entity (DDD)**
  
  • Follows Domain-Driven Design principles
  • Manages its own invariants internally
  • Validates track positions in addTrackAtPosition()
  • Prevents duplicate tracks via business rules
  • Uses application-generated alphanumeric IDs (UUID)
  • Encapsulates business logic (getTotalDuration, etc.)
  • Protects domain integrity through controlled access
  
  **Aggregation Relationship:**
  • Tracks can exist independently of playlists
  • Multiple playlists can reference the same track
  • Deleting a playlist doesn't delete the tracks
end note

@enduml