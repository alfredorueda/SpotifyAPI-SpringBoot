# Spotify-like REST API - HTTP Client Test Requests
# Compatible with IntelliJ IDEA's built-in HTTP client
# 
# This file contains comprehensive test requests for all API endpoints
# using the type-safe DTOs implemented with Java 21 records.
#
# Base URL: http://localhost:8080
# 
# Instructions:
# 1. Start the application: mvn spring-boot:run
# 2. Ensure MySQL is running: docker-compose up -d
# 3. Click the green play button next to each request to execute
# 4. Use the response IDs in subsequent requests

###############################################################################
# TRACKS API
###############################################################################

### Create Track #1 - Bohemian Rhapsody
POST http://localhost:8080/tracks
Content-Type: application/json

{
  "title": "Bohemian Rhapsody",
  "artist": "Queen",
  "duration": 355
}

### Create Track #2 - Stairway to Heaven
POST http://localhost:8080/tracks
Content-Type: application/json

{
  "title": "Stairway to Heaven",
  "artist": "Led Zeppelin",
  "duration": 482
}

### Create Track #3 - Hotel California
POST http://localhost:8080/tracks
Content-Type: application/json

{
  "title": "Hotel California",
  "artist": "Eagles",
  "duration": 391
}

### Get All Tracks
GET http://localhost:8080/tracks

### Get Track by ID
# Replace {track-id} with actual ID from create response
GET http://localhost:8080/tracks/{{track-id}}

### Update Track
# Replace {track-id} with actual ID from create response
PUT http://localhost:8080/tracks/{{track-id}}
Content-Type: application/json

{
  "title": "Bohemian Rhapsody (Remastered)",
  "artist": "Queen",
  "duration": 355
}

### Delete Track
# Replace {track-id} with actual ID from create response
DELETE http://localhost:8080/tracks/{{track-id}}

###############################################################################
# PLAYLISTS API
###############################################################################

### Create Playlist #1 - Rock Classics
POST http://localhost:8080/playlists
Content-Type: application/json

{
  "name": "Rock Classics",
  "isPublic": true
}

### Create Playlist #2 - Private Collection
POST http://localhost:8080/playlists
Content-Type: application/json

{
  "name": "My Private Collection",
  "isPublic": false
}

### Create Playlist #3 - 70s Hits
POST http://localhost:8080/playlists
Content-Type: application/json

{
  "name": "70s Greatest Hits",
  "isPublic": true
}

### Get All Playlists
GET http://localhost:8080/playlists

### Get Playlist by ID
# Replace {playlist-id} with actual ID from create response
GET http://localhost:8080/playlists/{{playlist-id}}

### Update Playlist
# Replace {playlist-id} with actual ID from create response
PUT http://localhost:8080/playlists/{{playlist-id}}
Content-Type: application/json

{
  "name": "Ultimate Rock Classics",
  "isPublic": true
}

### Delete Playlist
# Replace {playlist-id} with actual ID from create response
DELETE http://localhost:8080/playlists/{{playlist-id}}

###############################################################################
# PLAYLIST TRACK MANAGEMENT
###############################################################################

### Add Track to Playlist (at the end)
# Replace {playlist-id} and {track-id} with actual IDs
POST http://localhost:8080/playlists/{{playlist-id}}/tracks
Content-Type: application/json

{
  "trackId": "{{track-id}}"
}

### Add Track at Specific Position (position 0 - beginning)
# Replace {playlist-id} and {track-id} with actual IDs
POST http://localhost:8080/playlists/{{playlist-id}}/tracks/position
Content-Type: application/json

{
  "trackId": "{{track-id}}",
  "position": 0
}

### Add Track at Specific Position (position 1 - second)
# Replace {playlist-id} and {track-id} with actual IDs
POST http://localhost:8080/playlists/{{playlist-id}}/tracks/position
Content-Type: application/json

{
  "trackId": "{{track-id}}",
  "position": 1
}

### Get All Tracks in Playlist
# Replace {playlist-id} with actual ID from create response
GET http://localhost:8080/playlists/{{playlist-id}}/tracks

###############################################################################
# COMPLETE WORKFLOW EXAMPLE
###############################################################################

### 1. Create a new track
POST http://localhost:8080/tracks
Content-Type: application/json

{
  "title": "Sweet Child O' Mine",
  "artist": "Guns N' Roses",
  "duration": 356
}

### 2. Create a new playlist
POST http://localhost:8080/playlists
Content-Type: application/json

{
  "name": "Guitar Heroes",
  "isPublic": true
}

### 3. Add the track to the playlist
# Use actual IDs from steps 1 and 2
POST http://localhost:8080/playlists/{{playlist-id-from-step-2}}/tracks
Content-Type: application/json

{
  "trackId": "{{track-id-from-step-1}}"
}

### 4. View the updated playlist with tracks
GET http://localhost:8080/playlists/{{playlist-id-from-step-2}}

### 5. View all tracks in the playlist
GET http://localhost:8080/playlists/{{playlist-id-from-step-2}}/tracks

###############################################################################
# ERROR TESTING SCENARIOS
###############################################################################

### Test: Invalid Track Creation (missing required fields)
POST http://localhost:8080/tracks
Content-Type: application/json

{
  "title": "",
  "artist": "Test Artist",
  "duration": -1
}

### Test: Invalid Playlist Creation (null values)
POST http://localhost:8080/playlists
Content-Type: application/json

{
  "name": null,
  "isPublic": null
}

### Test: Get Non-existent Track
GET http://localhost:8080/tracks/non-existent-id

### Test: Get Non-existent Playlist
GET http://localhost:8080/playlists/non-existent-id

### Test: Add Non-existent Track to Playlist
POST http://localhost:8080/playlists/{{playlist-id}}/tracks
Content-Type: application/json

{
  "trackId": "non-existent-track-id"
}

### Test: Invalid Position (negative number)
POST http://localhost:8080/playlists/{{playlist-id}}/tracks/position
Content-Type: application/json

{
  "trackId": "{{track-id}}",
  "position": -1
}

### Test: Invalid Position (too high)
POST http://localhost:8080/playlists/{{playlist-id}}/tracks/position
Content-Type: application/json

{
  "trackId": "{{track-id}}",
  "position": 999
}

###############################################################################
# BULK DATA CREATION FOR TESTING
###############################################################################

### Create Multiple Tracks for Testing
POST http://localhost:8080/tracks
Content-Type: application/json

{
  "title": "Imagine",
  "artist": "John Lennon",
  "duration": 183
}

###

POST http://localhost:8080/tracks
Content-Type: application/json

{
  "title": "Like a Rolling Stone",
  "artist": "Bob Dylan",
  "duration": 369
}

###

POST http://localhost:8080/tracks
Content-Type: application/json

{
  "title": "Smells Like Teen Spirit",
  "artist": "Nirvana",
  "duration": 301
}

###

POST http://localhost:8080/tracks
Content-Type: application/json

{
  "title": "Billie Jean",
  "artist": "Michael Jackson",
  "duration": 294
}

###

POST http://localhost:8080/tracks
Content-Type: application/json

{
  "title": "Hey Jude",
  "artist": "The Beatles",
  "duration": 431
}

###############################################################################
# NOTES FOR DEVELOPERS
###############################################################################

# Variable Usage:
# - Replace {{track-id}} with actual track IDs from create responses
# - Replace {{playlist-id}} with actual playlist IDs from create responses
# - You can use IntelliJ's HTTP client variables feature for dynamic values
#
# Expected Response Codes:
# - POST (Create): 201 Created
# - GET (Retrieve): 200 OK
# - PUT (Update): 200 OK
# - DELETE: 204 No Content
# - Errors: 400 Bad Request, 404 Not Found, 500 Internal Server Error
#
# Type-Safe DTOs:
# All requests use the new Java 21 record DTOs for type safety:
# - CreateTrackRequest, UpdateTrackRequest
# - CreatePlaylistRequest, UpdatePlaylistRequest
# - AddTrackToPlaylistRequest, AddTrackAtPositionRequest
#
# Validation:
# - DTO constructors automatically validate input
# - Empty/null strings and negative numbers will throw validation errors
# - Invalid positions will throw InvalidTrackPositionException